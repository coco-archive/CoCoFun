* 6809 assembly program generated by cmoc 0.1.15
	ORG	$2800		Code section
program_start	EQU	*
	LBSR	INILIB		initialize standard library and global variables
	LBSR	_main		call main()
	PSHS	B,A		send main() return value to exit()
	LBSR	_exit		use LBSR to respect calling convention
functions_start	EQU	*


*******************************************************************************

* FUNCTION CoCoMiscDelay(): defined at ./CoCoMisc.c:101
_CoCoMiscDelay	EQU	*
	PSHS	U	
	LEAU	,S	
	LEAS	-2,S	
* Line ./CoCoMisc.c:102: for init
* Line ./CoCoMisc.c:102: init of variable ii
	CLRA
	CLRB
	STD	-2,U		variable ii
	BRA	L00086		jump to for condition
L00085	EQU	*
* Line ./CoCoMisc.c:102: for body
* Useless label removed
* Line ./CoCoMisc.c:102: for increment(s)
	LDD	-2,U	
	ADDD	#1	
	STD	-2,U	
L00086	EQU	*
* Line ./CoCoMisc.c:102: for condition
	LDD	-2,U		variable ii
	CMPD	4,U		variable count
	BLO	L00085	
* optim: branchToNextLocation
* Useless label removed
* Useless label removed
	LEAS	,U	
	PULS	U,PC	


*******************************************************************************

* FUNCTION CoCoMiscPaletteFade(): defined at ./CoCoMisc.c:49
_CoCoMiscPaletteFade	EQU	*
	PSHS	U	
	LEAU	,S	
	LEAS	-4,S	
* Line ./CoCoMisc.c:51: init of variable palette
	LDB	G00081+0,PCR	variable _cocoRGBMode, declared at ./CoCoMisc.c:18
	CMPB	#0	
	BEQ	L00089		if conditional expression is false
	LDD	4,U		variable rgbPalette, declared at ./CoCoMisc.c:49
	BRA	L00090		end of true expression of conditional
L00089	EQU	*
	LDD	6,U		variable cmpPalette, declared at ./CoCoMisc.c:49
L00090	EQU	*
	STD	-2,U		variable palette
* Line ./CoCoMisc.c:53: switch
	LDB	9,U		variable level, declared at ./CoCoMisc.c:49
	CMPB	#$00		case 0
	BEQ	L00092	
	CMPB	#$01		case 1
	BEQ	L00093	
	CMPB	#$02		case 2
	LBEQ	L00094	
	CMPB	#$03		case 3
	LBEQ	L00095	
	CMPB	#$04		case 4
	LBEQ	L00096	
	CMPB	#$05		case 5
	LBEQ	L00097	
	CMPB	#$06		case 6
	LBEQ	L00098	
	LBRA	L00091		switch default
L00092	EQU	*	case 0
* Line ./CoCoMisc.c:55: function call: memset()
	LDD	#$10		decimal 16 signed
	PSHS	B,A		argument 3 of memset()
	CLRA
	CLRB
	PSHS	B,A		argument 2 of memset()
	LDD	#$FFB0		decimal 65456 unsigned
	PSHS	B,A		argument 1 of memset()
	LBSR	_memset	
	LEAS	6,S	
	LBRA	L00091		break
L00093	EQU	*	case 1
* Line ./CoCoMisc.c:58: if
	LDB	G00081+0,PCR	variable _cocoRGBMode, declared at ./CoCoMisc.c:18
	TSTB
	BEQ	L00100	
* optim: condBranchOverUncondBranch
* Useless label removed
* Line ./CoCoMisc.c:59: for init
* Line ./CoCoMisc.c:59: init of variable ii
	CLRA
	CLRB
	STD	-4,U		variable ii
	BRA	L00103		jump to for condition
L00102	EQU	*
* Line ./CoCoMisc.c:59: for body
* Line ./CoCoMisc.c:59: assignment: =
	LDX	-2,U		pointer palette
	LDD	-4,U		variable ii
	LEAX	D,X		add byte offset
	LDB	,X		get r-value
	LSRB
	LSRB
	LSRB
	PSHS	B	
	LDD	#$FFB0		decimal 65456 unsigned
	TFR	D,X	
	LDD	-4,U		variable ii
	LEAX	D,X		add byte offset
	LDB	,S+	
	STB	,X	
* Useless label removed
* Line ./CoCoMisc.c:59: for increment(s)
	LDD	-4,U	
	ADDD	#1	
	STD	-4,U	
L00103	EQU	*
* Line ./CoCoMisc.c:59: for condition
	LDD	-4,U		variable ii
	CMPD	#$10	
	BLT	L00102	
* optim: branchToNextLocation
* Useless label removed
	BRA	L00101		jump over else clause
L00100	EQU	*	else
* Line ./CoCoMisc.c:62: for init
* Line ./CoCoMisc.c:62: init of variable ii
	CLRA
	CLRB
	STD	-4,U		variable ii
	BRA	L00107		jump to for condition
L00106	EQU	*
* Line ./CoCoMisc.c:62: for body
* Line ./CoCoMisc.c:62: assignment: =
	LDD	#$1F		decimal 31 signed
	PSHS	B,A	
	LDX	-2,U		pointer palette
	LDD	-4,U		variable ii
	LEAX	D,X		add byte offset
	LDB	,X		get r-value
	CLRA			promotion of binary operand
	ANDA	,S+	
	ANDB	,S+	
	PSHS	B	
	LDD	#$FFB0		decimal 65456 unsigned
	TFR	D,X	
	LDD	-4,U		variable ii
	LEAX	D,X		add byte offset
	LDB	,S+	
	STB	,X	
* Useless label removed
* Line ./CoCoMisc.c:62: for increment(s)
	LDD	-4,U	
	ADDD	#1	
	STD	-4,U	
L00107	EQU	*
* Line ./CoCoMisc.c:62: for condition
	LDD	-4,U		variable ii
	CMPD	#$10	
	BLT	L00106	
* optim: branchToNextLocation
* Useless label removed
L00101	EQU	*	end if
	LBRA	L00091		break
L00094	EQU	*	case 2
* Line ./CoCoMisc.c:66: if
	LDB	G00081+0,PCR	variable _cocoRGBMode, declared at ./CoCoMisc.c:18
	TSTB
	BEQ	L00111	
* optim: condBranchOverUncondBranch
* Useless label removed
* Line ./CoCoMisc.c:67: for init
* Line ./CoCoMisc.c:67: init of variable ii
	CLRA
	CLRB
	STD	-4,U		variable ii
	BRA	L00114		jump to for condition
L00113	EQU	*
* Line ./CoCoMisc.c:67: for body
* Line ./CoCoMisc.c:67: assignment: =
	LDD	#$38		decimal 56 signed
	PSHS	B,A	
	LDX	-2,U		pointer palette
	LDD	-4,U		variable ii
	LEAX	D,X		add byte offset
	LDB	,X		get r-value
	CLRA			promotion of binary operand
	ANDA	,S+	
	ANDB	,S+	
	PSHS	B	
	LDD	#$FFB0		decimal 65456 unsigned
	TFR	D,X	
	LDD	-4,U		variable ii
	LEAX	D,X		add byte offset
	LDB	,S+	
	STB	,X	
* Useless label removed
* Line ./CoCoMisc.c:67: for increment(s)
	LDD	-4,U	
	ADDD	#1	
	STD	-4,U	
L00114	EQU	*
* Line ./CoCoMisc.c:67: for condition
	LDD	-4,U		variable ii
	CMPD	#$10	
	BLT	L00113	
* optim: branchToNextLocation
* Useless label removed
	BRA	L00112		jump over else clause
L00111	EQU	*	else
* Line ./CoCoMisc.c:70: for init
* Line ./CoCoMisc.c:70: init of variable ii
	CLRA
	CLRB
	STD	-4,U		variable ii
	BRA	L00118		jump to for condition
L00117	EQU	*
* Line ./CoCoMisc.c:70: for body
* Line ./CoCoMisc.c:70: assignment: =
	LDD	#$2F		decimal 47 signed
	PSHS	B,A	
	LDX	-2,U		pointer palette
	LDD	-4,U		variable ii
	LEAX	D,X		add byte offset
	LDB	,X		get r-value
	CLRA			promotion of binary operand
	ANDA	,S+	
	ANDB	,S+	
	PSHS	B	
	LDD	#$FFB0		decimal 65456 unsigned
	TFR	D,X	
	LDD	-4,U		variable ii
	LEAX	D,X		add byte offset
	LDB	,S+	
	STB	,X	
* Useless label removed
* Line ./CoCoMisc.c:70: for increment(s)
	LDD	-4,U	
	ADDD	#1	
	STD	-4,U	
L00118	EQU	*
* Line ./CoCoMisc.c:70: for condition
	LDD	-4,U		variable ii
	CMPD	#$10	
	BLT	L00117	
* optim: branchToNextLocation
* Useless label removed
L00112	EQU	*	end if
	LBRA	L00091		break
L00095	EQU	*	case 3
* Line ./CoCoMisc.c:74: for init
* Line ./CoCoMisc.c:74: init of variable ii
	CLRA
	CLRB
	STD	-4,U		variable ii
	BRA	L00122		jump to for condition
L00121	EQU	*
* Line ./CoCoMisc.c:74: for body
* Line ./CoCoMisc.c:74: function call: memcpy()
	LDD	#$10		decimal 16 signed
	PSHS	B,A		argument 3 of memcpy()
	LDD	-2,U		variable palette, declared at ./CoCoMisc.c:51
	PSHS	B,A		argument 2 of memcpy()
	LDD	#$FFB0		decimal 65456 unsigned
	PSHS	B,A		argument 1 of memcpy()
	LBSR	_memcpy	
	LEAS	6,S	
* Useless label removed
* Line ./CoCoMisc.c:74: for increment(s)
	LDD	-4,U	
	ADDD	#1	
	STD	-4,U	
L00122	EQU	*
* Line ./CoCoMisc.c:74: for condition
	LDD	-4,U		variable ii
	CMPD	#$10	
	BLT	L00121	
* optim: branchToNextLocation
* Useless label removed
	LBRA	L00091		break
L00096	EQU	*	case 4
* Line ./CoCoMisc.c:78: if
	LDB	G00081+0,PCR	variable _cocoRGBMode, declared at ./CoCoMisc.c:18
	TSTB
	BEQ	L00126	
* optim: condBranchOverUncondBranch
* Useless label removed
* Line ./CoCoMisc.c:79: for init
* Line ./CoCoMisc.c:79: init of variable ii
	CLRA
	CLRB
	STD	-4,U		variable ii
	BRA	L00129		jump to for condition
L00128	EQU	*
* Line ./CoCoMisc.c:79: for body
* Line ./CoCoMisc.c:79: assignment: =
	LDD	#$07		decimal 7 signed
	PSHS	B,A	
	LDX	-2,U		pointer palette
	LDD	-4,U		variable ii
	LEAX	D,X		add byte offset
	LDB	,X		get r-value
	CLRA			promotion of binary operand
	ORA	,S+	
	ORB	,S+	
	PSHS	B	
	LDD	#$FFB0		decimal 65456 unsigned
	TFR	D,X	
	LDD	-4,U		variable ii
	LEAX	D,X		add byte offset
	LDB	,S+	
	STB	,X	
* Useless label removed
* Line ./CoCoMisc.c:79: for increment(s)
	LDD	-4,U	
	ADDD	#1	
	STD	-4,U	
L00129	EQU	*
* Line ./CoCoMisc.c:79: for condition
	LDD	-4,U		variable ii
	CMPD	#$10	
	BLT	L00128	
* optim: branchToNextLocation
* Useless label removed
	BRA	L00127		jump over else clause
L00126	EQU	*	else
* Line ./CoCoMisc.c:82: for init
* Line ./CoCoMisc.c:82: init of variable ii
	CLRA
	CLRB
	STD	-4,U		variable ii
	BRA	L00133		jump to for condition
L00132	EQU	*
* Line ./CoCoMisc.c:82: for body
* Line ./CoCoMisc.c:82: assignment: =
	LDD	#$10		decimal 16 signed
	PSHS	B,A	
	LDX	-2,U		pointer palette
	LDD	-4,U		variable ii
	LEAX	D,X		add byte offset
	LDB	,X		get r-value
	CLRA			promotion of binary operand
	ORA	,S+	
	ORB	,S+	
	PSHS	B	
	LDD	#$FFB0		decimal 65456 unsigned
	TFR	D,X	
	LDD	-4,U		variable ii
	LEAX	D,X		add byte offset
	LDB	,S+	
	STB	,X	
* Useless label removed
* Line ./CoCoMisc.c:82: for increment(s)
	LDD	-4,U	
	ADDD	#1	
	STD	-4,U	
L00133	EQU	*
* Line ./CoCoMisc.c:82: for condition
	LDD	-4,U		variable ii
	CMPD	#$10	
	BLT	L00132	
* optim: branchToNextLocation
* Useless label removed
L00127	EQU	*	end if
	LBRA	L00091		break
L00097	EQU	*	case 5
* Line ./CoCoMisc.c:86: if
	LDB	G00081+0,PCR	variable _cocoRGBMode, declared at ./CoCoMisc.c:18
	TSTB
	BEQ	L00137	
* optim: condBranchOverUncondBranch
* Useless label removed
* Line ./CoCoMisc.c:87: for init
* Line ./CoCoMisc.c:87: init of variable ii
	CLRA
	CLRB
	STD	-4,U		variable ii
	BRA	L00140		jump to for condition
L00139	EQU	*
* Line ./CoCoMisc.c:87: for body
* Line ./CoCoMisc.c:87: assignment: =
	LDX	-2,U		pointer palette
	LDD	-4,U		variable ii
	LEAX	D,X		add byte offset
	LDB	,X		get r-value
	CLRA			promotion of binary operand
	PSHS	B,A	
	LDD	#$38		decimal 56 signed
	ORA	,S+	
	ORB	,S+	
	PSHS	B	
	LDD	#$FFB0		decimal 65456 unsigned
	TFR	D,X	
	LDD	-4,U		variable ii
	LEAX	D,X		add byte offset
	LDB	,S+	
	STB	,X	
* Useless label removed
* Line ./CoCoMisc.c:87: for increment(s)
	LDD	-4,U	
	ADDD	#1	
	STD	-4,U	
L00140	EQU	*
* Line ./CoCoMisc.c:87: for condition
	LDD	-4,U		variable ii
	CMPD	#$10	
	BLT	L00139	
* optim: branchToNextLocation
* Useless label removed
	BRA	L00138		jump over else clause
L00137	EQU	*	else
* Line ./CoCoMisc.c:90: for init
* Line ./CoCoMisc.c:90: init of variable ii
	CLRA
	CLRB
	STD	-4,U		variable ii
	BRA	L00144		jump to for condition
L00143	EQU	*
* Line ./CoCoMisc.c:90: for body
* Line ./CoCoMisc.c:90: assignment: =
	LDD	#$20		decimal 32 signed
	PSHS	B,A	
	LDX	-2,U		pointer palette
	LDD	-4,U		variable ii
	LEAX	D,X		add byte offset
	LDB	,X		get r-value
	CLRA			promotion of binary operand
	ORA	,S+	
	ORB	,S+	
	PSHS	B	
	LDD	#$FFB0		decimal 65456 unsigned
	TFR	D,X	
	LDD	-4,U		variable ii
	LEAX	D,X		add byte offset
	LDB	,S+	
	STB	,X	
* Useless label removed
* Line ./CoCoMisc.c:90: for increment(s)
	LDD	-4,U	
	ADDD	#1	
	STD	-4,U	
L00144	EQU	*
* Line ./CoCoMisc.c:90: for condition
	LDD	-4,U		variable ii
	CMPD	#$10	
	BLT	L00143	
* optim: branchToNextLocation
* Useless label removed
L00138	EQU	*	end if
	BRA	L00091		break
L00098	EQU	*	case 6
* Line ./CoCoMisc.c:94: function call: memset()
	LDD	#$10		decimal 16 signed
	PSHS	B,A		argument 3 of memset()
	LDD	#$3F		decimal 63 signed
	PSHS	B,A		argument 2 of memset()
	LDD	#$FFB0		decimal 65456 unsigned
	PSHS	B,A		argument 1 of memset()
	LBSR	_memset	
	LEAS	6,S	
* optim: branchToNextLocation
L00091	EQU	*	end of switch
* Line ./CoCoMisc.c:97: assignment: =
	LDD	#$FFB0		decimal 65456 unsigned
	TFR	D,X	
	LDB	11,U		variable border
	CLRA			index expression is of byte type
	LEAX	D,X		add byte offset
	LDB	,X		get r-value
	PSHS	B	
	LDX	#$FF9A		decimal 65434
	LDB	,S+	
	STB	,X	
* Useless label removed
	LEAS	,U	
	PULS	U,PC	


*******************************************************************************

* FUNCTION foo(): defined at Oops.c:17
_foo	EQU	*
	PSHS	U	
	LEAU	,S	
* Line Oops.c:18: function call: memset()
	LDD	#$0A		constant expression: 10 decimal
	PSHS	B,A		argument 3 of memset()
	LDD	#$01		decimal 1 signed
	PSHS	B,A		argument 2 of memset()
	LDD	4,U		variable b, declared at Oops.c:17
	PSHS	B,A		argument 1 of memset()
	LBSR	_memset	
	LEAS	6,S	
* Useless label removed
	LEAS	,U	
	PULS	U,PC	


*******************************************************************************

* FUNCTION inkey(): defined at /usr/local/share/cmoc/coco.h:369
_inkey	EQU	*
* Inline assembly:

        jsr     [$A000]     
        tfr     a,b         
    
* End of inline assembly.
* Useless label removed
	RTS


*******************************************************************************

* FUNCTION main(): defined at Oops.c:21
_main	EQU	*
	PSHS	U	
	LEAU	,S	
	LEAS	-11,S	
* Line Oops.c:25: function call: foo()
	LEAX	-10,U		variable bb, declared at Oops.c:22
	PSHS	X		argument 1 of foo()
	LBSR	_foo	
	LEAS	2,S	
* Line Oops.c:26: for init
* Line Oops.c:26: init of variable ii
	CLR	-11,U		variable ii
	BRA	L00148		jump to for condition
L00147	EQU	*
* Line Oops.c:26: for body
* Line Oops.c:26: function call: printf()
	LEAX	-10,U		member bytes of Bitmap, via variable bb
	LDB	-11,U		variable ii
	CLRA			index expression is of byte type
	LEAX	D,X		add byte offset
	LDB	,X		get r-value
	CLRA			promoting byte argument to word
	PSHS	B,A		argument 2 of printf()
	LEAX	S00084,PCR	"%d\n"
	PSHS	X		argument 1 of printf()
	LBSR	_printf	
	LEAS	4,S	
* Useless label removed
* Line Oops.c:26: for increment(s)
	INC	-11,U	
L00148	EQU	*
* Line Oops.c:26: for condition
	LDB	-11,U		variable ii
	CMPB	#$0A	
	BLO	L00147	
* optim: branchToNextLocation
* Useless label removed
* Line Oops.c:29: while
L00152	EQU	*	while condition at Oops.c:29
* Useless label removed
* Line Oops.c:30: function call: printf()
* Line Oops.c:30: function call: inkey()
	LBSR	_inkey	
	CLRA			promoting byte argument to word
	PSHS	B,A		argument 2 of printf()
	LEAX	S00084,PCR	"%d\n"
	PSHS	X		argument 1 of printf()
	LBSR	_printf	
	LEAS	4,S	
	BRA	L00152		go to while condition
* Useless label removed
* Line Oops.c:32: return with value
* optim: instrFollowingUncondBranch
* optim: instrFollowingUncondBranch
* optim: branchToNextLocation
* Useless label removed
* optim: instrFollowingUncondBranch
* optim: instrFollowingUncondBranch


*******************************************************************************

* FUNCTION setSAMRegisters(): defined at /usr/local/share/cmoc/coco.h:493
_setSAMRegisters	EQU	*
	PSHS	U	
	LEAU	,S	
* Line /usr/local/share/cmoc/coco.h:495: while
L00155	EQU	*	while condition at /usr/local/share/cmoc/coco.h:495
	LDB	9,U		variable numBits, declared at /usr/local/share/cmoc/coco.h:493
	TSTB
	BEQ	L00156	
* optim: condBranchOverUncondBranch
* Useless label removed
* Line /usr/local/share/cmoc/coco.h:499: assignment: =
	LDB	7,U		variable value
	ANDB	#$01	
	CLRA			promotion of binary operand
	ADDD	4,U		optim: pushDLoadAdd
* 
* 
	TFR	D,X	
	CLRB
	STB	,X	
* Line /usr/local/share/cmoc/coco.h:501: assignment: =
	LDB	7,U		variable value, declared at /usr/local/share/cmoc/coco.h:493
	LSRB
	STB	7,U	
	LEAX	9,U		variable numBits, declared at /usr/local/share/cmoc/coco.h:493
	DEC	,X	
	LDB	,X	
* Line /usr/local/share/cmoc/coco.h:507: assignment: +=
	LDD	4,U		variable samAddr
	ADDD	#$02		+= operator at /usr/local/share/cmoc/coco.h:507
	STD	4,U	
	BRA	L00155		go to while condition
L00156	EQU	*	after end of while starting at /usr/local/share/cmoc/coco.h:495
* Useless label removed
	LEAS	,U	
	PULS	U,PC	
functions_end	EQU	*
string_literals_start	EQU	*


*******************************************************************************

* STRING LITERALS
S00083	EQU	*
	FCC	"Hello"	
	FCB	0	
S00084	EQU	*
	FCC	"%d"	
	FCB	$0A	
	FCB	0	
string_literals_end	EQU	*


*******************************************************************************

* READ-ONLY GLOBAL VARIABLES


*******************************************************************************

* WRITABLE GLOBAL VARIABLES
* Globals with static initializers
* Uninitialized globals
G00078	EQU	*
	RMB	1		isCoCo3
G00079	EQU	*
	RMB	1		textScreenWidth
G00080	EQU	*
	RMB	1		textScreenHeight
G00081	EQU	*
	RMB	1		_cocoRGBMode
G00082	EQU	*
	RMB	6		buffer


*******************************************************************************

#include "stdlib-data.inc"


*******************************************************************************

#include "stdlib.inc"


*******************************************************************************

* Initialize global variables.
INITGL	EQU	*
* Line /usr/local/share/cmoc/coco.h:51: init of variable isCoCo3
	CLR	G00078+0,PCR	variable isCoCo3
* Line /usr/local/share/cmoc/coco.h:152: init of variable textScreenWidth
	LDB	#$20		32
	STB	G00079+0,PCR	variable textScreenWidth
* Line /usr/local/share/cmoc/coco.h:153: init of variable textScreenHeight
	LDB	#$10		16
	STB	G00080+0,PCR	variable textScreenHeight
* Line ./CoCoMisc.c:18: init of variable _cocoRGBMode
	LDB	#$01		1
	STB	G00081+0,PCR	variable _cocoRGBMode
* Line Oops.c:15: init of variable buffer
	LDD	#6		length of string literal + terminating NUL
	PSHS	B,A		push length to _memcpy
	LEAX	S00083,PCR	"Hello"
	PSHS	X		source array
	LEAX	G00082+0,PCR	byte array buffer
	PSHS	X		destination array
	LBSR	_memcpy		initialize array
	LEAS	6,S	
	RTS			end of global variable initialization


*******************************************************************************

program_end	EQU	*


*******************************************************************************

* WRITABLE DATA SECTION


*******************************************************************************

	END
